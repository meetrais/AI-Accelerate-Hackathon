========================================
DEPLOY TO GOOGLE CLOUD PLATFORM (GCP)
========================================

PREREQUISITES:
--------------
1. Google Cloud account with billing enabled
2. gcloud CLI installed: https://cloud.google.com/sdk/docs/install
3. Docker installed (for local builds)
4. GCP project created

STEP 1: SETUP GCP PROJECT
--------------------------
# Login to GCP
gcloud auth login

# Set your project
gcloud config set project YOUR_PROJECT_ID

# Enable required APIs
gcloud services enable cloudbuild.googleapis.com run.googleapis.com containerregistry.googleapis.com

STEP 2: CONFIGURE ENVIRONMENT
------------------------------
You'll need to set these environment variables in Cloud Run after deployment:

Required:
- GCP_PROJECT_ID=your-project-id
- GCP_LOCATION=us-central1
- ELASTIC_CLOUD_ID=your-elastic-cloud-id
- ELASTIC_API_KEY=your-elastic-api-key
- STRIPE_SECRET_KEY=your-stripe-key

Optional:
- NODE_ENV=production
- PORT=8080 (Cloud Run sets this automatically)

STEP 3: DEPLOY
--------------

Option A: Using PowerShell (Windows)
-------------------------------------
.\deploy-gcp.ps1

Option B: Using Bash (Mac/Linux)
---------------------------------
chmod +x deploy-gcp.sh
./deploy-gcp.sh

Option C: Manual Deployment
----------------------------
# Build locally
npm run build

# Build Docker image
docker build -t gcr.io/YOUR_PROJECT_ID/flight-booking-assistant .

# Push to Container Registry
docker push gcr.io/YOUR_PROJECT_ID/flight-booking-assistant

# Deploy to Cloud Run
gcloud run deploy flight-booking-assistant \
  --image gcr.io/YOUR_PROJECT_ID/flight-booking-assistant \
  --platform managed \
  --region us-central1 \
  --allow-unauthenticated \
  --port 8080 \
  --memory 2Gi \
  --cpu 2

STEP 4: SET ENVIRONMENT VARIABLES
----------------------------------
After deployment, set environment variables:

gcloud run services update flight-booking-assistant \
  --region us-central1 \
  --update-env-vars \
  GCP_PROJECT_ID=your-project-id,\
  GCP_LOCATION=us-central1,\
  ELASTIC_CLOUD_ID=your-cloud-id,\
  ELASTIC_API_KEY=your-api-key,\
  STRIPE_SECRET_KEY=your-stripe-key

Or use the Cloud Run console:
https://console.cloud.google.com/run

STEP 5: TEST DEPLOYMENT
-----------------------
# Get your service URL
gcloud run services describe flight-booking-assistant \
  --region us-central1 \
  --format 'value(status.url)'

# Test health endpoint
curl https://YOUR-SERVICE-URL/health

# Open in browser
https://YOUR-SERVICE-URL

STEP 6: VIEW LOGS
-----------------
gcloud run services logs read flight-booking-assistant \
  --region us-central1 \
  --limit 50

TROUBLESHOOTING:
----------------
1. Build fails:
   - Check Dockerfile syntax
   - Ensure all dependencies are in package.json
   - Check build logs: gcloud builds list

2. Deployment fails:
   - Check quotas in GCP console
   - Verify APIs are enabled
   - Check IAM permissions

3. Service crashes:
   - Check logs: gcloud run services logs read
   - Verify environment variables
   - Check memory/CPU limits

4. Can't connect to services:
   - Verify Elasticsearch is accessible
   - Check Firestore permissions
   - Verify Vertex AI API is enabled

COST OPTIMIZATION:
------------------
- Set min-instances to 0 (scales to zero when not in use)
- Use appropriate memory/CPU (2Gi/2CPU recommended)
- Monitor usage in GCP console
- Set up budget alerts

SECURITY:
---------
1. Use Secret Manager for sensitive data:
   gcloud secrets create ELASTIC_API_KEY --data-file=-

2. Update service to use secrets:
   gcloud run services update flight-booking-assistant \
     --update-secrets ELASTIC_API_KEY=ELASTIC_API_KEY:latest

3. Enable VPC connector for private Elasticsearch

4. Set up Cloud Armor for DDoS protection

MONITORING:
-----------
- Cloud Run metrics: https://console.cloud.google.com/run
- Logs: https://console.cloud.google.com/logs
- Traces: https://console.cloud.google.com/traces
- Set up alerts for errors and latency

CONTINUOUS DEPLOYMENT:
----------------------
Use Cloud Build triggers for automatic deployment:

1. Connect your GitHub repo
2. Create trigger on push to main branch
3. Use cloudbuild.yaml configuration

USEFUL COMMANDS:
----------------
# Update service
gcloud run services update flight-booking-assistant --region us-central1

# Delete service
gcloud run services delete flight-booking-assistant --region us-central1

# List services
gcloud run services list

# Describe service
gcloud run services describe flight-booking-assistant --region us-central1

# Set traffic to specific revision
gcloud run services update-traffic flight-booking-assistant \
  --to-revisions REVISION=100 \
  --region us-central1

SUPPORT:
--------
- GCP Documentation: https://cloud.google.com/run/docs
- Cloud Run pricing: https://cloud.google.com/run/pricing
- Support: https://cloud.google.com/support
